Multi-pass: when completion of the last pass has occurred, it shouldn't
fast return on axis1, to avoid potentially marring the work

Make use of the keys on the right (#, Del, Home, PgUp, PgDn, End)?

Chuck angle appears to over-report by about 25 degrees per revolution?
  - to test. Does this impact threading?

Remove Alt-Arrows for jog once controller set up for mill

Lots of refactoring still needed as this grew a bit organically

Implement a proper menu/dialog (see level_designer)

(related to above) Address the "Mode" concept which currently provides
pseudo-modal "dialogs" interleaved into program flow, and is proving
difficult to maintain. If all motors are stopped during a "dialog" then
we can put them all on a separate flow

Touchscreen support (not that I have touch screens yet)

Now that we have support for reading a linear scale on the Z-axis
we need to consider how best to use it. Should position come solely
from that, rather than continuing to rely on "dead reckoning"?
Or should it be used just to make corrections to the expected position?
For the latter maybe we just periodically call setPosition() on axis1's
motor? Or we give the motor a callback function to determine position?

Support limit switches. Could have multiple switches all on one pin and
when triggered it simply issues a 'stop all'. This is partially
implemented (see limitSwitchTriggered())

Support enable pin for each motor

Set initial x-axis retraction direction from config file

Desperately need a "scratch memory" (or collection of them) to allow
a return to the previous stopped location. This is because I'll line
things up, then forget to store the memory location before moving.
(WIP) - currently key L works for axis 1 (Z) for this.
    - scratch memories should be cleared if the axis value is changed
      (i.e. with zero or manually setting a position)

Start thinking around a setting for adding a tiny amount of x motion
to counteract a lathe that cuts a bit of a taper (which works brilliantly,
but needs to be a config item that is applied automatically, rather
than having to use taper mode)
    Idea: for determining the angle required for correcting a lathe
    cutting a taper: allow the program to calculate the angle required
    by entering two measurements and a distance

All "Axis1..." and "Axis2..." references should be replaced with an
array to allow for future expansion. Might be difficult owing to different
behaviours of the axes.

Rotary encoder doesn't currently do anything with rotation direction,
so getPositionDegrees() fails to take into account manual back-rotation
of the chuck/spindle

Consider adding support for some form of switch / sensor to prevent
carriage movement outside of specific points (or mandate position
checks at start-up to do this in software only?)
  - Display warning if chuck is running in reverse

Support display in thousands of an inch as an option - should be simple
to just update in the view (and keep everything metric underneath)
