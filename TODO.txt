Address the "Mode" concept which currently provides pseudo-modal
"dialogs" interleaved into program flow, and is proving difficult
to maintain. If all motors are stopped during a "dialog" then we
can put them all on a separate flow.

Automate threading operations (or all?) to automatically return after the
target step has been reached and a key is pressed (or even fully automate)
-- AND (these are related) --
Automatic keyway "shaping" by simply moving Z in on the lathe repeatedly
with a tiny increment to X each time (obviously with the chuck locked
out and stationary). This would also give the ability to cut internal
squares / hexes etc.

Support enable pin for each motor

Set initial x-axis retraction direction from config file

Start thinking around how to make control of two axes easier for
mill when Y axis is stepper-controlled

Desperately need a "scratch memory" (or collection of them) to allow
a return to the previous stopped location. This is because I'll line
things up, then forget to store the memory location before moving.
(WIP) - currently key L works for axis 1 (Z) for this.
    - scratch memories should be cleared if the axis value is changed
      (i.e. with zero or manually setting a position)

Start thinking around a setting for adding a tiny amount of x motion
to counteract a lathe that cuts a bit of a taper (which works brilliantly,
but needs to be a config item that is applied automatically, rather
than having to use taper mode)
    Idea: for determining the angle required for correcting a lathe
    cutting a taper: allow the program to calculate the angle required
    by entering two measurements and a distance

All "Axis1..." and "Axis2..." references should be replaced with an
array to allow for future expansion.

Add ability to pick up existing memories if the stepper loses the plot

Think about incorporating reading from scales to make position reporting
accurate rather than estimated

Rotary encoder doesn't currently do anything with rotation direction,
so getPositionDegrees() fails to take into account manual back-rotation
of the chuck/spindle

Consider adding support for some form of switch / sensor to prevent
carriage movement outside of specific points (or mandate position
checks at start-up to do this in software only?)

Much as I dislike the idea, I should support imperial units :/
